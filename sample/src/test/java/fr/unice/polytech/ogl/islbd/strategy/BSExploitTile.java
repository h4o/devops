package fr.unice.polytech.ogl.islbd.strategy;

import static org.junit.Assert.*;

import javax.annotation.Resources;

import org.json.simple.parser.ParseException;
import org.junit.Before;
import org.junit.Test;

import fr.unice.polytech.ogl.islbd.Direction;
import fr.unice.polytech.ogl.islbd.action.Exploit;
import fr.unice.polytech.ogl.islbd.action.Explore;
import fr.unice.polytech.ogl.islbd.action.Glimpse;
import fr.unice.polytech.ogl.islbd.action.Land;
import fr.unice.polytech.ogl.islbd.action.Move;
import fr.unice.polytech.ogl.islbd.action.Scout;
import fr.unice.polytech.ogl.islbd.memory.Memory;
import fr.unice.polytech.ogl.islbd.objective.BasicResource;

public class BSExploitTile {

	private Memory memory;
	private BehaviourSimple behaviour;
	private String move;
	
	@Before
	public void setUp() throws Exception {
		String data = "{ \"creek\": \"4672ce1b-3732-4731-bbcc-781f8f140a13\",\"men\": 15,\"budget\": 7000,\"objective\": [{\"amount\": 3000,\"resource\": \"WOOD\"}]}";
		memory = new Memory();
		behaviour = new BehaviourSimple(memory);
		
		memory.rememberInitialData(data);
		memory.rememberAction(new Land(memory.getInitialCreek(), 1));
		memory.rememberConsequences("{\"cost\": 13,\"extras\": {},\"status\": \"OK\"}");
		
		String glimpse = "{ \"cost\":4,\"extras\":{\"asked_range\":3,\"report\":[ [[\"OCEAN\",100]],[[\"SHRUBLAND\",100]],"
				+ "[\"SHRUBLAND\"],[\"TROPICAL_SEASONAL_FOREST\"]] },\"status\"\"OK\"}";
		String scout = "{\"cost\": 5,\"extras\": {\"altitude\": 0,\"resources\": [\"WOOD\"]},\"status\": \"OK\"}";
		move = "{\"cost\": 7,\"extras\": {},\"status\": \"OK\"}";
		
		memory.rememberAction(new Glimpse(Direction.N, 3));
		memory.rememberConsequences(glimpse);
		memory.rememberAction(new Scout(Direction.N));
		memory.rememberConsequences(scout);
		memory.rememberAction(new Move(Direction.N));
		memory.rememberConsequences(move);
	}

	@Test
	public void test() throws ParseException {
		
		// Exploit tile because the tile has been scouted
		assertEquals(new Exploit(BasicResource.WOOD), behaviour.exploitTile(memory.getTile(memory.getLocation())));
		memory.rememberAction(new Exploit(BasicResource.WOOD));
		memory.rememberConsequences("{\"cost\": 4,\"extras\": {\"amount\": 1},\"status\": \"OK\"}");
		
		memory.rememberAction(new Move(Direction.N));
		memory.rememberConsequences(move);
		
		// Explore tile because the tile hasn't been scouted or explored
		assertEquals(new Explore(), behaviour.exploitTile(memory.getTile(memory.getLocation())));
	}

}
